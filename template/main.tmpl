{{define "main" -}}
package main

import (
	"io"
	"net/http"
	"strconv"
	"text/template"

	"github.com/labstack/echo"
	"github.com/labstack/echo/middleware"
	"github.com/sonyarouje/simdb/db"
)

var driver *db.Driver


// Define the template registry struct
type TemplateRegistry struct {
	templates map[string]*template.Template
}

// Implement e.Renderer interface
func (t *TemplateRegistry) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
	tmpl, ok := t.templates[name]
	if !ok {
		err := errors.New("Template not found -> " + name)
		return err
	}
	return tmpl.ExecuteTemplate(w, "base.html", data)
}

func dashboard(c echo.Context) error {
	return c.JSON(http.StatusOK, "Erfolg!")
}

func main() {
	// Database initialisation
	_, driver = InitializeDb()

	// Echo instance
	e := echo.New()
	// Instantiate a template registry with an array of template set
	// Ref: https://gist.github.com/rand99/808e6e9702c00ce64803d94abff65678
	templates := make(map[string]*template.Template)
	{{range .Entities -}}
	templates["{{lowercase .Name}}list.html"] = template.Must(template.ParseFiles("view/{{lowercase .Name}}list.html", "view/base.html", "view/sidenav.html"))
	{{end}}
	e.Renderer = &TemplateRegistry{
		templates: templates,
	}


	// Middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	// Routes
	e.GET("/", dashboard) // Opens Dashboard
	{{range .Entities}}
	// routes for {{.Name}}
	e.GET("/{{lowercase .Name}}", list{{plural .Name}})
	e.POST("/{{lowercase .Name}}", create{{.Name}})
	e.GET("/{{lowercase .Name}}//:id", get{{.Name}})
	e.PUT("/{{lowercase .Name}}//:id", update{{.Name}})
	e.DELETE("/{{lowercase .Name}}//:id", delete{{.Name}})
	{{end}}
	
	// Start server
	e.Logger.Fatal(e.Start(":80"))
}
{{end}}

