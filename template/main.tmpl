{{define "main" -}}
package main

import (
	"io"
	"text/template"
	. "{{.Name}}/controller"
	"github.com/labstack/echo"
	"github.com/labstack/echo/middleware"
)

type Template struct {
	templates *template.Template
}

func (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
	return t.templates.ExecuteTemplate(w, name, data)
}


func main() {
	// Echo instance
	e := echo.New()
	// assets will be loaded from /static directory as /assets/*
	e.Static("/static", "assets")
	
	// Instantiate a template registry with an array of template set
	// Ref: https://gist.github.com/rand99/808e6e9702c00ce64803d94abff65678
	renderer := &Template{
		templates: template.Must(template.ParseGlob("view/*.html")),
	}
	e.Renderer = renderer

	// Middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	// Routes
	e.GET("/", Dashboard) // Opens Dashboard
	{{range .Entities}}
	// routes for {{.Name}}
	e.GET("/{{.Name | plural | lowercase }}", List{{plural .Name}})
	e.GET("/{{.Name | plural | lowercase }}/:id", Get{{.Name}})
	e.GET("/{{.Name | plural | lowercase }}/new", New{{.Name}})
	e.POST("/{{.Name | plural | lowercase }}", Create{{.Name}})
	e.POST("/{{.Name | plural | lowercase }}/:id", Update{{.Name}})
	e.POST("/{{.Name | plural | lowercase }}/:id/delete", Delete{{.Name}})
	{{end}}
	
	// Start server
	e.Logger.Fatal(e.Start(":8080"))
}
{{end}}

