{{define "model" -}}
// Generated code - do not modify it will be overwritten!!
// Time: {{.Object.TimeStamp}}
package model

import (

)

{{with .Object}}
type {{.Name}} struct {
	Id     string     `json:"id"`
{{range .Fields}}{{template "types" .}}
{{end -}}
}

func (obj {{.Name}}) ID() (jsonField string, value interface{}) {
	value = obj.Id
	jsonField = "id"
	return
}

{{$name := .Name}}
{{- range .Fields}}{{- if eq .IsLabel true}}
func (obj {{$name}}) Label() (string) {
	return obj.{{.Name}}
}
{{- end}}{{end}}

// Database access functions
// retrieve all entries for specified Object
func GetAll{{plural .Name}}() (err error, entities []{{.Name}}) {
	err = Database.Open({{.Name}}{}).Get().AsEntity(&entities)
	if err != nil {
		panic(err)
	}
	return err, entities
}

// retrieve the entry with specific Id
func Get{{.Name}}ById(id string) (err error, entity {{.Name}}) {
	err = Database.Open({{.Name}}{}).Where("id", "=", id).First().AsEntity(&entity)
	if err != nil {
		panic(err)
	}
	return err, entity
}

{{$name := .Name}}
{{- range .Fields}}{{if eq .Type "child"}}
// retrieve all entries with specific ParentId
func GetAll{{$name | plural}}By{{.Object}}Id(parentid string) (err error, entities []{{$name}}) {
	err = Database.Open({{$name}}{}).Where("{{.Name | lowercase}}id", "=", parentid).Get().AsEntity(&entities)
	if err != nil {
		panic(err)
	}
	return err, entities
}

func (obj {{$name}}) LabelBy{{.Object}}Id(id string) (string){
	var entity {{.Object}}
	err := Database.Open({{.Object}}{}).Where("id", "=", id).First().AsEntity(&entity)
	if err != nil {
		panic(err)
	}
	return entity.Label()
}
{{end}}{{end}}

{{$name := .Name}}
{{range $i, $field := .Fields}}{{if eq $field.Type "lookup" "child"}}
// Access lookup entries for {{$field.Object}}
func (obj {{$name}}) Lookup{{$field.Object}}() ([]{{$field.Object}}) {
	err, {{$field.Object | lowercase}} := GetAll{{$field.Object | plural}}()
	if err != nil {
		panic(err)
	}
	return  {{$field.Object | lowercase}}
}
{{- end}}{{end}}

{{end}}
{{end}}


