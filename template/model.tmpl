{{define "model" -}}
// Generated code - do not modify it will be overwritten!!
// Time: {{.Object.TimeStamp}}
package model

import (
	"github.com/labstack/echo"
	"net/http"
	"strconv"
	. "{{.ApplicationName}}/controller"
)

{{with .Object}}
type {{.Name}} struct {
	Id     string     `json:"id"`
{{range .Fields}}{{template "types" .}}
{{end -}}
}

func (obj {{.Name}}) ID() (jsonField string, value interface{}) {
	value = obj.Id
	jsonField = "id"
	return
}

{{$name := .Name}}
{{- range .Fields}}{{- if eq .IsLabel true}}
func (obj {{$name}}) Label() (string) {
	return obj.{{.Name}}
}
{{- end}}{{end}}

// Database access functions
// retrieve all entries for specified Object
func GetAll{{plural .Name}}() (err error, entities []{{.Name}}) {
	err = Database.Open({{.Name}}{}).Get().AsEntity(&entities)
	if err != nil {
		panic(err)
	}
	return err, entities
}

// retrieve the entry with specific Id
func Get{{.Name}}ById(id string) (err error, entity {{.Name}}) {
	err = Database.Open({{.Name}}{}).Where("id", "=", id).First().AsEntity(&entity)
	if err != nil {
		panic(err)
	}
	return err, entity
}

{{$name := .Name}}
{{- range .Fields}}{{if eq .Type "child"}}
// retrieve all entries with specific ParentId
func GetAll{{$name | plural}}By{{.Object}}Id(parentid string) (err error, entities []{{$name}}) {
	err = Database.Open({{$name}}{}).Where("{{.Name | lowercase}}id", "=", parentid).Get().AsEntity(&entities)
	if err != nil {
		panic(err)
	}
	return err, entities
}

func (obj {{$name}}) LabelBy{{.Object}}Id(id string) (string){
	var entity {{.Object}}
	err := Database.Open({{.Object}}{}).Where("id", "=", id).First().AsEntity(&entity)
	if err != nil {
		panic(err)
	}
	return entity.Label()
}
{{end}}{{end}}

{{$name := .Name}}
{{range $i, $field := .Fields}}{{if eq $field.Type "lookup" "child"}}
// Access lookup entries for {{$field.Object}}
func (obj {{$name}}) Lookup{{$field.Object}}() ([]{{$field.Object}}) {
	err, {{$field.Object | lowercase}} := GetAll{{$field.Object | plural}}()
	if err != nil {
		panic(err)
	}
	return  {{$field.Object | lowercase}}
}
{{- end}}{{end}}

// -------------------------------
// Handlers
// -------------------------------

// list handler
func List{{plural .Name}}(c echo.Context) error {
	err, {{.Name | plural | lowercase}} := GetAll{{plural .Name}}()
	if err != nil {
		panic(err)
	}
	p:=NewPage("{{.Name | plural}}")
	p.Data = {{.Name | plural | lowercase}}
	return c.Render(http.StatusOK, "{{lowercase .Name}}list", p)
}

// get handler
func Get{{.Name}}(c echo.Context) error {
	id := c.Param("id")

	err, {{lowercase .Name}} := Get{{.Name}}ById(id)
	if err != nil {
		panic(err)
	}
	{{$name := .Name}}
	{{range .Fields}}{{if eq .Type "parent"}}
	_, {{lowercase $name}}.{{.Name | plural}} = GetAll{{.Object | plural}}By{{$name}}Id(id)
	{{end}}{{end}}
	p:=NewPage("Edit {{.Name}}")
	p.Data = {{lowercase .Name}}	

	return c.Render(http.StatusOK, "{{lowercase .Name}}detail", p)
}

// new handler
func New{{.Name}}(c echo.Context) error {
	{{lowercase .Name}} := new({{.Name}})
	
	p:=NewPage("New {{.Name}}")
	p.Data = {{lowercase .Name}}

	return c.Render(http.StatusOK, "{{lowercase .Name}}detail", p)
}

// create handler
func Create{{.Name}}(c echo.Context) (err error) {
	{{lowercase .Name}} := new({{.Name}})
  	if err = c.Bind({{lowercase .Name}}); err != nil {
  	  panic(err)
  	}
	{{lowercase .Name}}.Id = strconv.Itoa(NextId({{.Name | printf "%q"}}))
	err = Database.Insert({{lowercase .Name}})
	if err != nil {
		panic(err)
	}
	
	return List{{plural .Name}}(c)
}

// update handler
func Update{{.Name}}(c echo.Context) (err error) {
	{{lowercase .Name}} := new({{.Name}})
  	if err = c.Bind({{lowercase .Name}}); err != nil {
  	  return
  	}

	err = Database.Update({{lowercase .Name}})
	if err != nil {
		panic(err)
	}

	return List{{plural .Name}}(c)
}

// delete handler
func Delete{{.Name}}(c echo.Context) error {
	id := c.Param("id")
	err, {{lowercase .Name}} := Get{{.Name}}ById(id)
	if err != nil {
		panic(err)
	}
	err = Database.Delete({{lowercase .Name}})
	if err != nil {
		panic(err)
	}
	
	return List{{plural .Name}}(c)
}
{{end}}
{{end}}


