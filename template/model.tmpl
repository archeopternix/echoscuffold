{{define "model" -}}
// Generated code - do not modify it will be overwritten!!
// Time: {{.TimeStamp}}
package main

import (
	"github.com/labstack/echo"
	"net/http"
	"fmt"
	"strconv"
)

type {{.Name}} struct {
	Id     string     `json:"id"`
{{range .Fields}}	{{.Name}}	{{template "types" .}}{{.Object}}	`json:"{{lowercase .Name}}"`
{{end}}}

func (obj {{.Name}}) ID() (jsonField string, value interface{}) {
	value = obj.Id
	jsonField = "id"
	return
}

// Database access functions
// retrieve all entries for specified Object
func getAll{{plural .Name}}() (err error, entities []{{.Name}}) {
	err = Database.Open({{.Name}}{}).Get().AsEntity(&entities)
	if err != nil {
		panic(err)
	}
	return err, entities
}

// retrieve the entry with specific Id
func get{{.Name}}ById(id string) (err error, entity {{.Name}}) {
	err = Database.Open({{.Name}}{}).Where("id", "=", id).First().AsEntity(&entity)
	if err != nil {
		panic(err)
	}
	return err, entity
}

// -------------------------------
// Handlers
// -------------------------------

// list handler
func list{{plural .Name}}(c echo.Context) error {
	err, {{.Name | plural | lowercase}} := getAll{{plural .Name}}()
	if err != nil {
		panic(err)
	}
	return c.Render(http.StatusOK, "{{lowercase .Name}}list", {{.Name | plural | lowercase}})
}

// get handler
func get{{.Name}}(c echo.Context) error {
	id := c.Param("id")

	err, {{lowercase .Name}} := get{{.Name}}ById(id)
	if err != nil {
		panic(err)
	}

	return c.Render(http.StatusOK, "{{lowercase .Name}}detail", {{lowercase .Name}})
}

// new handler
func new{{.Name}}(c echo.Context) error {
	{{lowercase .Name}} := new({{.Name}})
	return c.Render(http.StatusOK, "{{lowercase .Name}}detail", {{lowercase .Name}})
}

// create handler
func create{{.Name}}(c echo.Context) (err error) {
	fmt.Println("create")
	{{lowercase .Name}} := new({{.Name}})
  	if err = c.Bind({{lowercase .Name}}); err != nil {
  	  panic(err)
  	}
	{{lowercase .Name}}.Id = strconv.Itoa(NextId({{.Name | printf "%q"}}))
	err = Database.Insert({{lowercase .Name}})
	if err != nil {
		panic(err)
	}
	err, {{.Name | plural | lowercase}} := getAll{{plural .Name}}()
	if err != nil {
		panic(err)
	}
	return c.Render(http.StatusOK, "{{lowercase .Name}}list", {{.Name | plural | lowercase}})
}

// update handler
func update{{.Name}}(c echo.Context) (err error) {
	fmt.Println("update")
	{{lowercase .Name}} := new({{.Name}})
  	if err = c.Bind({{lowercase .Name}}); err != nil {
  	  return
  	}

	err = Database.Update({{lowercase .Name}})
	if err != nil {
		panic(err)
	}

	err, {{.Name | plural | lowercase}} := getAll{{plural .Name}}()
	if err != nil {
		panic(err)
	}
	return c.Render(http.StatusOK, "{{lowercase .Name}}list", {{.Name | plural | lowercase}})
}

// delete handler
func delete{{.Name}}(c echo.Context) error {
	var {{.Name | plural | lowercase }} []{{.Name}}

	id := c.Param("id")

	err, {{lowercase .Name}} := get{{.Name}}ById(id)
	if err != nil {
		panic(err)
	}
	err = Database.Delete({{lowercase .Name}})
	if err != nil {
		panic(err)
	}
	
	err, {{.Name | plural | lowercase }} = getAll{{plural .Name}}()
		if err != nil {
		panic(err)
	}

	return c.Render(http.StatusOK, "{{lowercase .Name}}list", {{.Name | plural | lowercase}})
}
{{end}}